## ams_version=1.0

Model Main_BiasInAI {
	Comment: "See also https://gitlab.aimms.com/joris/aimms-with-python-service/";
	Section Data_Model {
		Section Quantities_and_Units {
			Comment: {
				"This section contains all the units and quantities that are added automatically by AIMMS.
				It is recommended to declare all your quantities here."
			}
			Quantity SI_Time_Duration {
				BaseUnit: s;
				Conversions: minute->s : #-># * 60;
				Comment: {
					"Expresses the value for the duration of periods.
					
					The unit s has been added automatically because it is a required unit for AimmsWebUI.
					
					The unit minute has been added automatically because it is a required unit for AimmsWebUI."
				}
			}
		}
		Set s_ids {
			SubsetOf: Integers;
			Index: i_id;
			Parameter: ep_id;
		}
		Parameter p_target {
			IndexDomain: i_id;
		}
		Parameter bp_target {
			IndexDomain: i_id;
			Range: binary;
			Definition: 1 $ ( p_target(i_id) > 0.7 );
		}
		StringParameter sp_commentText {
			IndexDomain: i_id;
		}
		Parameter p_severeToxicity {
			IndexDomain: i_id;
		}
		Parameter p_obscene {
			IndexDomain: i_id;
		}
		Parameter p_identityAttack {
			IndexDomain: i_id;
		}
		Parameter p_insult {
			IndexDomain: i_id;
		}
		Parameter p_threat {
			IndexDomain: i_id;
		}
		Parameter p_asian {
			IndexDomain: i_id;
		}
		Parameter p_atheist {
			IndexDomain: i_id;
		}
		Parameter p_bisexual {
			IndexDomain: i_id;
		}
		Parameter p_black {
			IndexDomain: i_id;
		}
		Parameter p_buddhist {
			IndexDomain: i_id;
		}
		Parameter p_christian {
			IndexDomain: i_id;
		}
		Parameter p_female {
			IndexDomain: i_id;
		}
		Parameter p_heterosexual {
			IndexDomain: i_id;
		}
		Parameter p_hindu {
			IndexDomain: i_id;
		}
		Parameter p_homosexualGayLesbian {
			IndexDomain: i_id;
		}
		Parameter p_intellectualLearningDisability {
			IndexDomain: i_id;
		}
		Parameter p_jewish {
			IndexDomain: i_id;
		}
		Parameter p_latino {
			IndexDomain: i_id;
		}
		Parameter p_male {
			IndexDomain: i_id;
		}
		Parameter p_muslim {
			IndexDomain: i_id;
		}
		Parameter p_otherDisability {
			IndexDomain: i_id;
		}
		Parameter p_otherGender {
			IndexDomain: i_id;
		}
		Parameter p_otherraceethnicity {
			IndexDomain: i_id;
		}
		Parameter p_otherReligion {
			IndexDomain: i_id;
		}
		Parameter p_otherSexualOrientation {
			IndexDomain: i_id;
		}
		Parameter p_physicalDisability {
			IndexDomain: i_id;
		}
		Parameter p_psychiatricMentalIllness {
			IndexDomain: i_id;
		}
		Parameter p_transgender {
			IndexDomain: i_id;
		}
		Parameter p_white {
			IndexDomain: i_id;
		}
		StringParameter sp_createdDate {
			IndexDomain: i_id;
		}
		Parameter p_publicationID {
			IndexDomain: i_id;
		}
		Parameter p_parentID {
			IndexDomain: i_id;
		}
		Parameter p_articleID {
			IndexDomain: i_id;
		}
		StringParameter sp_rating {
			IndexDomain: i_id;
		}
		Parameter p_funny {
			IndexDomain: i_id;
		}
		Parameter p_wow {
			IndexDomain: i_id;
		}
		Parameter p_sad {
			IndexDomain: i_id;
		}
		Parameter p_likes {
			IndexDomain: i_id;
		}
		Parameter p_disagree {
			IndexDomain: i_id;
		}
		Parameter p_sexualExplicit {
			IndexDomain: i_id;
		}
		Parameter p_identityAnnotatorCount {
			IndexDomain: i_id;
		}
		Parameter p_toxicityAnnotatorCount {
			IndexDomain: i_id;
		}
	}
	Section Integration {
		Procedure pr_importDataset {
			Body: {
				dex::AddMapping(
				        "CSVMapping",                   ! mapping name
				        "Mappings/csv-import-mapping.xml"       ! location + name of mapping file
				);
				
				webui::SetProgressMessage("Initializing dataset...");
				
				dex::ReadFromFile(
				        "data/data.csv",                ! data file
				        "CSVMapping",                   ! mapping name, as specified in AddMapping
				        1,                              ! empty identifiers
				        1,                              ! empty range sets
				        1                               ! reset 'iterative-binds-to'
				);
				
				pr_changeQuantityElementsPerPage;
			}
		}
	}
	Section UI_Declarations {
		Procedure pr_empty;
		StringParameter sp_logo {
			Definition: "aimms_logo.png";
		}
		StringParameter sp_def_readonly {
			Definition: "readonly";
		}
		Section Workflow {
			StringParameter sp_myWorkflows {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexWorkflowSpec);
			}
			StringParameter sp_myWorkflowSteps {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
				Definition: {
					data 
					{ ( 1, 1, displayText       ) : "Welcome"            ,  ( 1, 1, icon              ) : "aimms-happy"        ,
					  ( 1, 1, pageId            ) : "home"               ,  ( 1, 1, tooltip           ) : "welcome"            ,
					  ( 1, 1, workflowPageState ) : "active"             ,  ( 1, 1, pageDataState     ) : "Incomplete"         ,
					  ( 1, 1, redirectPageId    ) : "problem_description",  ( 1, 2, displayText       ) : "Story"              ,
					  ( 1, 2, icon              ) : "aimms-lamp5"        ,  ( 1, 2, pageId            ) : "problem_description",
					  ( 1, 2, tooltip           ) : "Problem description",  ( 1, 2, workflowPageState ) : "active"             ,
					  ( 1, 2, pageDataState     ) : "incomplete"         ,  ( 1, 2, redirectPageId    ) : "home"               ,
					  ( 1, 3, displayText       ) : "Inputs"             ,  ( 1, 3, icon              ) : "aimms-equalizer2"   ,
					  ( 1, 3, pageId            ) : "inputs"             ,  ( 1, 3, tooltip           ) : "Input data"         ,
					  ( 1, 3, workflowPageState ) : "active"             ,  ( 1, 3, pageDataState     ) : "incomplete"         ,
					  ( 1, 3, redirectPageId    ) : "home"               ,  ( 1, 4, displayText       ) : "Results"            ,
					  ( 1, 4, icon              ) : "aimms-make-group"   ,  ( 1, 4, pageId            ) : "dashboard"          ,
					  ( 1, 4, tooltip           ) : "Model outputs"      ,  ( 1, 4, workflowPageState ) : "active"             ,
					  ( 1, 4, pageDataState     ) : "Incomplete"         ,  ( 1, 4, redirectPageId    ) : "home"                }
				}
			}
		}
		Section Pages {
			Section Inputs {
				Procedure pr_changeQuantityElementsPerPage {
					Body: {
						webui::SetProgressMessage("Calculating elements per page...");
						
						ep_calc_idPerPageFirst(i_page) := Element( s_ids, (ord(i_page)-1)*p_quantityElementsPerPage + 1 );
						ep_calc_idPerPageLast( i_page) := Element( s_ids, ord(i_page)*p_quantityElementsPerPage );
						ep_lastPage := last(s_def_pages);
						if not ep_calc_idPerPageLast( ep_lastPage) then
							ep_calc_idPerPageLast( ep_lastPage) := last( s_ids );
						endif ;
						
						empty p_calc_idPerPage;
						for i_page do
							s_pageIds := SubRange(
								Superset :  s_ids, 
								First    :  ep_calc_idPerPageFirst(i_page), 
								Last     :  ep_calc_idPerPageLast( i_page));
							p_calc_idPerPage(i_page, i_pid ) := 1;
						endfor ;
					}
				}
				Procedure pr_previousPage {
					Body: {
						if ep_currentPage = first(i_page) then
						    !do nothing
						else    
						    ep_currentPage -= 1;
						
						endif;
					}
				}
				Procedure pr_firstPage {
					Body: {
						ep_currentPage := first(i_page);
					}
				}
				Procedure pr_nextPage {
					Body: {
						if ep_currentPage = last(i_page) then
						    !do nothing
						else  
						    ep_currentPage += 1;
						endif;
					}
				}
				Procedure pr_lastPage {
					Body: {
						ep_currentPage := last(i_page);
					}
				}
				Set s_def_pages {
					Index: i_page;
					Definition: {
						{1 .. p_def_numberOfPages}
					}
				}
				ElementParameter ep_currentpage {
					Range: s_def_pages;
				}
				Set s_def_idsPerPage {
					SubsetOf: s_ids;
					Index: i_pg_id;
					Definition: {
						{i_id | p_calc_idPerPage(ep_currentPage, i_id)}
					}
				}
				Parameter p_def_numberOfPages {
					Property: NoSave;
					Definition: ceil(p_def_cardID /$ p_quantityElementsPerPage);
				}
				Parameter p_def_cardID {
					Definition: card(s_ids);
				}
				StringParameter sp_def_currentPage {
					Definition: "Page " + ep_currentPage + " of " + card(s_def_pages);
				}
				Parameter p_quantityElementsPerPage {
					Range: [0, 50000];
					InitialData: 350;
					webui::TooltipIdentifier: sp_def_tooltipQuantityElementsPerPage;
					webui::UponChangeProcedure: pr_changeQuantityElementsPerPage;
				}
				StringParameter sp_def_tooltipQuantityElementsPerPage {
					Definition: "By changing this value, the quantity of elements per page will change.";
				}
				Parameter p_calc_idPerPage {
					IndexDomain: (i_page,i_id);
					Range: binary;
				}
				Set s_pageIds {
					SubsetOf: s_ids;
					Index: i_pid;
				}
				ElementParameter ep_calc_idPerPageFirst {
					IndexDomain: i_page;
					Range: s_ids;
				}
				ElementParameter ep_calc_idPerPageLast {
					IndexDomain: i_page;
					Range: s_ids;
				}
				ElementParameter ep_lastPage {
					Range: s_def_pages;
				}
				StringParameter sp_def_inputPageSecondaryActions {
					IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
					Definition: {
						{
							( '1', 'displaytext' ) : "Import",  
							( '1', 'icon'        ) : "aimms-upload",  
							( '1', 'procedure'   ) : "pr_importDataset",  
							( '1', 'state'       ) : "Active"
						}
					}
				}
			}
			Section Results {
				StringParameter sp_def_tooltipCommentToInvestigate {
					Definition: {
						"Please enter the comment you want to invesigate here!"
					}
				}
				StringParameter sp_queryToInvestigate {
					webui::TooltipIdentifier: sp_def_tooltipCommentToInvestigate;
				}
				StringParameter sp_def_resultPageSecondaryActions {
					IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
					Definition: {
						{
							( '1', 'displaytext' ) : "Check",  
							( '1', 'icon'        ) : "aimms-theater",  
							( '1', 'procedure'   ) : "pr_actionInvestigateWhetherEnteredCommentIsToxic",  
							( '1', 'state'       ) : "Active"
						}
					}
				}
				Parameter p_timeOutSeconds {
					InitialData: 120;
				}
				Set s_askedQueries {
					Index: i_query;
					Parameter: ep_query;
				}
				Set s_def_queryTypes {
					Index: i_qType;
					Definition: {
						{'Toxic', 'Not Toxic'}
					}
				}
				ElementParameter ep_calc_queryAnswer {
					IndexDomain: i_query;
					Range: s_def_queryTypes;
					InitialData: '';
					webui::FlagsIdentifier: sp_def_readonly;
				}
				Parameter bp_queryAnswerEmoji {
					IndexDomain: i_query;
					Range: binary;
					webui::AnnotationsIdentifier: sp_def_queryAnswerEmoji(i_query);
				}
				StringParameter sp_def_queryAnswerEmoji {
					IndexDomain: i_query;
					Definition: {
						if ep_calc_queryAnswer(i_query)= 'Toxic' then
						    "toxic-emoji"
						else
						    "not-toxic-emoji"
						endif;
					}
					webui::FlagsIdentifier: sp_def_readonly;
				}
				StringParameter sp_queryAsked {
					IndexDomain: i_query;
					webui::FlagsIdentifier: sp_def_readonly;
				}
				Parameter p_def_queryTypePercentage {
					IndexDomain: i_qType;
					Definition: sum(i_query, ep_calc_queryAnswer(i_query) = i_qType);
					Comment: "red-chart";
					webui::AnnotationsIdentifier: p_def_annotationQueryTypePercentage(i_qType);
				}
				StringParameter p_def_annotationQueryTypePercentage {
					IndexDomain: i_qType;
					Definition: {
						if i_qType = 'Toxic' then
						    "toxic"
						else
						    "not-toxic"
						endif;
					}
				}
				Parameter bp_calc_commentInvestigatedIsToxic {
					Range: binary;
					Comment: "raw result from Python";
				}
				StringParameter sp_calc_imageQueryAnswer;
				Procedure pr_pageOpenResultsPage {
					Body: {
						if not p_def_cardID then
							pr_importDataset();
						endif ;
						
						sp_queryToInvestigate := "<type query to check>" ;
						sp_calc_imageQueryAnswer := "question.png";
						
						currentInputs -= data { bp_calc_commentInvestigatedIsToxic };
					}
				}
				Procedure pr_actionInvestigateWhetherEnteredCommentIsToxic {
					Body: {
						
						pr_determineToxic();
					}
				}
			}
		}
	}
	Section Leverage_biasInAI_Service {
		Procedure pr_uploadLaunchService {
			Body: {
				_sp_appStoragePath := "PublicData/ServiceApp/biasInAI.zip";
				_sp_localApp := "biasInAIService/biasInAI.zip";
				if not FileExists( _sp_localApp ) then
					raise warning formatString("This .aimmspack does not oontain required %s", _sp_localApp);
				endif ;
				
				! if the app does not exist, upload it first
				_bp_appExists := 0;
				pro::storage::ExistsObject(_sp_appStoragePath, _bp_appExists);
				
				if _bp_appExists = 1 then
					! Clean up previous version.
					pro::management::LocalLogInfo("pr_uploadLaunchService(): Removing old version of: '" + _sp_appStoragePath );
					pro::DeleteStorageFile(storagePath : _sp_appStoragePath );
				endif ;
				if not pro::SaveFileToCentralStorage(_sp_localApp, _sp_appStoragePath) then
					raise warning formatString("pr_uploadLaunchService() failed to upload app: %s", _sp_localApp);
				endif ;
				pro::storage::ExistsObject(_sp_appStoragePath, _bp_appExists);
				if _bp_appExists <> 1 then
					_sp_warning := formatString("Failed to upload app %s to %s",  _sp_localApp, _sp_appStoragePath );
					pro::management::LocalLogInfo("pr_uploadLaunchService(): " + _sp_warning );
					raise warning _sp_warning ;
				endif ;
				_sp_storedApp := "pro://" + _sp_appStoragePath ;
				
				_p_retCodeLaunchService := pro::service::LaunchService(
					connectionURI      :  _sp_remoteURL, ! output, 
					serviceId          :  "biasInAIService", 
					imageName          :  "services/aimms-anaconda-service", 
					imageTag           :  "2023.07-1", 
					listenPort         :  8000, 
					storedApp          :  _sp_storedApp, 
					cmdLine            :  "python3 main.py"   );
				
				if not _p_retCodeLaunchService then
					_sp_errorMessage := formatString("pr_uploadLaunchService(): failed to launch service from %s. ", _sp_appStoragePath);
					! Get error message in DLL
					_p_retGetLastError := pro::management::GetLastError( _p_proErrorCode, _sp_proErrorDescription);
					if _p_retGetLastError then
						_sp_errorMessage += formatString("code %i: reason: %s", _p_proErrorCode, _sp_proErrorDescription);
					else
						_sp_errorMessage += "reason unknown";
					endif;
				
					raise warning _sp_errorMessage ;
					pro::management::LocalLogInfo( formatString("pr_uploadLaunchService(): warning = \"%s\", _sp_remoteURL = \"%s\", launch service returned %i", 
						_sp_errorMessage, _sp_remoteURL, _p_retCodeLaunchService));
				
				endif ;
				
				pro::management::LocalLogInfo( formatString("pr_uploadLaunchService(): _sp_remoteURL = %s, launch service returned %i", 
					_sp_remoteURL, _p_retCodeLaunchService));
				
				! Set the service.
				biasInAITuples::api::APIServer := "http://" + _sp_remoteURL;
			}
			StringParameter _sp_appStoragePath;
			StringParameter _sp_localApp;
			Parameter _bp_appExists;
			StringParameter _sp_remoteURL;
			Parameter _p_retCodeLaunchService;
			Parameter _p_retGetLastError;
			Parameter _p_proErrorCode;
			StringParameter _sp_proErrorDescription;
			StringParameter _sp_errorMessage;
			StringParameter _sp_storedApp;
			StringParameter _sp_warning;
		}
		Procedure pr_determineToxic {
			Body: {
				SetElementAdd(s_askedQueries, ep_query, card(i_query) + 1);
				sp_queryAsked(ep_query) := sp_queryToInvestigate;
				sp_calc_imageQueryAnswer := "question.png";
				
				webui::SetProgressMessage("Investigating query...");
				
				pr_callBiasInAITuples();
				
				p_loc_responseRetrieved := dex::client::WaitForResponses(timeout :  p_timeOutSeconds * 1000 /* milli seconds */);
				
				if not p_loc_responseRetrieved then
					raise error formatString("no response within %i seconds", p_timeOutSeconds ) ;
				endif;
			}
			Parameter p_loc_responseRetrieved;
		}
		Procedure pr_callBiasInAITuples {
			Body: {
				! By not setting the RequestResponseFilePrefix, we will be using memory streams!
				! biasInAITuples::api::RequestResponseFilePrefix:= "requestsResponses/" ;
				
				! As the OpenAPI library is Asynchronous, RestAPI calls need to be identified in the client.
				biasInAITuples::api::NewCallInstance(ep_loc_callInstance);
				
				block ! Fill in the data for making the request.
				
					! Pass the data from the data model to the corresponding data in the biasInAI library.
					biasInAITuples::_BiasInAIInputTuples::no_observations(ep_loc_callInstance) := p_def_cardID ;
					biasInAITuples::_BiasInAIInputTuples::new_comment(ep_loc_callInstance) := sp_queryToInvestigate ;
					biasInAITuples::_BiasInAIInputTuples::_observations::observations_iter := ElementRange( 1, p_def_cardID );
				
					ep_loc_iterToId( biasInAITuples::_BiasInAIInputTuples::_observations::i_observations ) 
					:=  element( s_ids, val( biasInAITuples::_BiasInAIInputTuples::_observations::i_observations ) );
				
					biasInAITuples::_BiasInAIInputTuples::_observations::comment_( ep_loc_callInstance, biasInAITuples::_BiasInAIInputTuples::_observations::i_observations) 
					:= sp_commentText( ep_loc_iterToId( biasInAITuples::_BiasInAIInputTuples::_observations::i_observations ) );
				
					biasInAITuples::_BiasInAIInputTuples::_observations::target(ep_loc_callInstance, biasInAITuples::_BiasInAIInputTuples::_observations::i_observations) 
					:=  bp_target( ep_loc_iterToId( biasInAITuples::_BiasInAIInputTuples::_observations::i_observations ) ) ;
				
					block ! Check if we passed the data correctly.
						_p_commentsCard := card( biasInAITuples::_BiasInAIInputTuples::_observations::comment_ );
						if _p_commentsCard <> p_def_cardID then
							raise error "internal error passing data \'comments\'" ;
						endif;
				
					endblock;
				endblock;
				
				! Install hook, which will copy the data or handle the error
				biasInAITuples::api::compute_compute_post::UserResponseHook 
				:=  'pr_responseHookTuples' ;
				
				! Start the request.
				biasInAITuples::api::compute_compute_post::apiCall(ep_loc_callInstance);
			}
			ElementParameter _ep_id {
				Range: s_ids;
			}
			ElementParameter _ep_cmtNo {
				Range: biasInAITuples::_BiasInAIInputTuples::_observations::observations_iter;
			}
			Parameter _p_commentsCard;
			ElementParameter ep_loc_callInstance {
				Range: dex::Instances;
			}
			ElementParameter ep_loc_iterToId {
				IndexDomain: biasInAITuples::_BiasInAIInputTuples::_observations::i_observations;
				Range: s_ids;
			}
		}
		Procedure pr_responseHookTuples {
			Arguments: (ep_in_callInstance);
			Body: {
				ep_loc_status := biasInAITuples::api::CallStatusCode(ep_in_callInstance);
				
				if StringLength( sp_queryToInvestigate ) > 5 then
					sp_log_cmtShort := substring( sp_queryToInvestigate, 1, 5 ) + "..." ;
				else
					sp_log_cmtShort := sp_queryToInvestigate ;
				endif;
				
				switch (ep_loc_status) do
					'200': ! Call went ok. 
						bp_calc_commentInvestigatedIsToxic := biasInAITuples::_BiasInAIOutput::is_toxic(ep_in_callInstance) ;
						ep_calc_queryAnswer(ep_query) := if bp_calc_commentInvestigatedIsToxic then 'Toxic' else 'Not Toxic' endif;
						sp_calc_imageQueryAnswer := if bp_calc_commentInvestigatedIsToxic then "toxic.png" else "not_toxic.png" endif;
						biasInAITuples::_BiasInAIInputTuples::EmptyInstance(  ep_in_callInstance );
						biasInAITuples::_BiasInAIOutput::EmptyInstance( ep_in_callInstance );
				
					'422': ! HTTP validation error.
					default:
						display { biasInAITuples::_HTTPValidationError::_detail::msg, 
							biasInAITuples::_HTTPValidationError::_detail::type_ }, 
							biasInAITuples::_HTTPValidationError::_detail::_loc::loc ;
						raise error formatString("biasInAITuples::isToxic(%s)/%s failed ( status: %e, error: %e): %s",
							sp_log_cmtShort,  ep_in_callInstance,
							biasInAITuples::api::CallStatusCode(ep_in_callInstance), 
							biasInAITuples::api::CallErrorCode(ep_in_callInstance),
							"" ! Todo: work on the error elaboration!
							);
				
				endswitch;
			}
			Comment: {
				"Client specific code for handling the response from the server, here
				whether the comment at hand is toxic or not."
			}
			DeclarationSection Locals {
				ElementParameter ep_in_callInstance {
					Range: dex::Instances;
					Property: Input;
				}
				ElementParameter ep_loc_status {
					Range: dex::HTTPStatusCodes;
				}
				StringParameter sp_log_cmtShort;
			}
		}
	}
	Section Application_Initialization_and_Termination {
		Procedure MainInitialization {
			Body: {
				ProfilerStart();
			}
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
		}
		Procedure PostMainInitialization {
			Body: {
				webui::SetProgressMessage("Initializing dataset...");
				
				p_quantityElementsPerPage := 350;
				pr_importDataset;
				
				ep_currentpage := first(i_page);
			}
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure pr_startup {
			Body: {
				dex::ReadAllMappings();
				
				! Do not launch the Python service for verify sessions and for solver sessions.
				if (pro::proSessionType = '') ! Running in AIMMS Developer
				    or (pro::proSessionType = 'webui') ! Running deployed on AIMMS Cloud. 
				then
				
					if pro::GetPROEndPoint() then
						pr_uploadLaunchService();
					else
						! Just use the service started by PyCharm on the biasInAI project.
						biasInAITuples::api::APIServer :=  "http://localhost:8000" ;
					endif;
				endif;
			}
		}
		Procedure MainExecution;
		Procedure PreMainTermination {
			Body: {
				return 1 ; ! We don't work with cases.
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
}
