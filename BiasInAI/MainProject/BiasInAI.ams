## ams_version=1.0

Model Main_BiasInAI {
	Section Data_Model {
		Section Quantities_and_Units {
			Comment: {
				"This section contains all the units and quantities that are added automatically by AIMMS.
				It is recommended to declare all your quantities here."
			}
			Quantity SI_Time_Duration {
				BaseUnit: s;
				Conversions: minute->s : #-># * 60;
				Comment: {
					"Expresses the value for the duration of periods.
					
					The unit s has been added automatically because it is a required unit for AimmsWebUI.
					
					The unit minute has been added automatically because it is a required unit for AimmsWebUI."
				}
			}
		}
		Set s_ids {
			Index: i_id;
		}
		Parameter p_target {
			IndexDomain: i_id;
		}
		StringParameter sp_commentText {
			IndexDomain: i_id;
		}
		Parameter p_severeToxicity {
			IndexDomain: i_id;
		}
		Parameter p_obscene {
			IndexDomain: i_id;
		}
		Parameter p_identityAttack {
			IndexDomain: i_id;
		}
		Parameter p_insult {
			IndexDomain: i_id;
		}
		Parameter p_threat {
			IndexDomain: i_id;
		}
		Parameter p_asian {
			IndexDomain: i_id;
		}
		Parameter p_atheist {
			IndexDomain: i_id;
		}
		Parameter p_bisexual {
			IndexDomain: i_id;
		}
		Parameter p_black {
			IndexDomain: i_id;
		}
		Parameter p_buddhist {
			IndexDomain: i_id;
		}
		Parameter p_christian {
			IndexDomain: i_id;
		}
		Parameter p_female {
			IndexDomain: i_id;
		}
		Parameter p_heterosexual {
			IndexDomain: i_id;
		}
		Parameter p_hindu {
			IndexDomain: i_id;
		}
		Parameter p_homosexualGayLesbian {
			IndexDomain: i_id;
		}
		Parameter p_intellectualLearningDisability {
			IndexDomain: i_id;
		}
		Parameter p_jewish {
			IndexDomain: i_id;
		}
		Parameter p_latino {
			IndexDomain: i_id;
		}
		Parameter p_male {
			IndexDomain: i_id;
		}
		Parameter p_muslim {
			IndexDomain: i_id;
		}
		Parameter p_otherDisability {
			IndexDomain: i_id;
		}
		Parameter p_otherGender {
			IndexDomain: i_id;
		}
		Parameter p_otherraceethnicity {
			IndexDomain: i_id;
		}
		Parameter p_otherReligion {
			IndexDomain: i_id;
		}
		Parameter p_otherSexualOrientation {
			IndexDomain: i_id;
		}
		Parameter p_physicalDisability {
			IndexDomain: i_id;
		}
		Parameter p_psychiatricMentalIllness {
			IndexDomain: i_id;
		}
		Parameter p_transgender {
			IndexDomain: i_id;
		}
		Parameter p_white {
			IndexDomain: i_id;
		}
		StringParameter sp_createdDate {
			IndexDomain: i_id;
		}
		Parameter p_publicationID {
			IndexDomain: i_id;
		}
		Parameter p_parentID {
			IndexDomain: i_id;
		}
		Parameter p_articleID {
			IndexDomain: i_id;
		}
		StringParameter sp_rating {
			IndexDomain: i_id;
		}
		Parameter p_funny {
			IndexDomain: i_id;
		}
		Parameter p_wow {
			IndexDomain: i_id;
		}
		Parameter p_sad {
			IndexDomain: i_id;
		}
		Parameter p_likes {
			IndexDomain: i_id;
		}
		Parameter p_disagree {
			IndexDomain: i_id;
		}
		Parameter p_sexualExplicit {
			IndexDomain: i_id;
		}
		Parameter p_identityAnnotatorCount {
			IndexDomain: i_id;
		}
		Parameter p_toxicityAnnotatorCount {
			IndexDomain: i_id;
		}
	}
	Section Integration {
		Procedure pr_importDataset {
			Body: {
				dex::AddMapping(
				        "CSVMapping",                   ! mapping name
				        "Mappings/csv-import-mapping.xml"       ! location + name of mapping file
				);
				
				dex::ReadFromFile(
				        "data/data.csv",                ! data file
				        "CSVMapping",                   ! mapping name, as specified in AddMapping
				        1,                              ! empty identifiers
				        1,                              ! empty range sets
				        1                               ! reset 'iterative-binds-to'
				);
			}
		}
	}
	Section UI_Declarations {
		Procedure pr_empty;
		StringParameter sp_logo {
			Definition: "aimms_logo.png";
		}
		Section Workflow {
			StringParameter sp_myWorkflows {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexWorkflowSpec);
			}
			StringParameter sp_myWorkflowSteps {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
				Definition: {
					data 
					{ ( 1, 1, displayText       ) : "Welcome"            ,  ( 1, 1, icon              ) : "aimms-happy"        ,
					  ( 1, 1, pageId            ) : "home"               ,  ( 1, 1, tooltip           ) : "welcome"            ,
					  ( 1, 1, workflowPageState ) : "active"             ,  ( 1, 1, pageDataState     ) : "Incomplete"         ,
					  ( 1, 1, redirectPageId    ) : "problem_description",  ( 1, 2, displayText       ) : "Story"              ,
					  ( 1, 2, icon              ) : "aimms-lamp5"        ,  ( 1, 2, pageId            ) : "problem_description",
					  ( 1, 2, tooltip           ) : "Problem description",  ( 1, 2, workflowPageState ) : "active"             ,
					  ( 1, 2, pageDataState     ) : "incomplete"         ,  ( 1, 2, redirectPageId    ) : "home"               ,
					  ( 1, 3, displayText       ) : "Inputs"             ,  ( 1, 3, icon              ) : "aimms-equalizer2"   ,
					  ( 1, 3, pageId            ) : "inputs"             ,  ( 1, 3, tooltip           ) : "Input data"         ,
					  ( 1, 3, workflowPageState ) : "active"             ,  ( 1, 3, pageDataState     ) : "incomplete"         ,
					  ( 1, 3, redirectPageId    ) : "home"               ,  ( 1, 4, displayText       ) : "Results"            ,
					  ( 1, 4, icon              ) : "aimms-make-group"   ,  ( 1, 4, pageId            ) : "dashboard"          ,
					  ( 1, 4, tooltip           ) : "Model outputs"      ,  ( 1, 4, workflowPageState ) : "active"             ,
					  ( 1, 4, pageDataState     ) : "Incomplete"         ,  ( 1, 4, redirectPageId    ) : "home"                }
				}
			}
		}
		Section Pages {
			Section Inputs {
				Procedure pr_changeQuantityElementsPerPage {
					Body: {
						empty p_calc_idPerPage;
						
						for i_id do
						    for (i_page) | ord(i_id) <= val(i_page) * p_quantityElementsPerPage do
						
						        p_calc_idPerPage(i_id, i_page) := 1;
						        break;
						    endfor;
						endfor;
					}
				}
				Procedure pr_previousPage {
					Body: {
						if ep_currentPage = first(i_page) then
						    !do nothing
						else    
						    ep_currentPage -= 1;
						
						endif;
					}
				}
				Procedure pr_nextPage {
					Body: {
						if ep_currentPage = last(i_page) then
						    !do nothing
						else  
						    ep_currentPage += 1;
						endif;
					}
				}
				Set s_def_pages {
					Index: i_page;
					Definition: if p_def_numberOfPages then {1 .. p_def_numberOfPages} else {} endif;
				}
				ElementParameter ep_currentpage {
					Range: s_def_pages;
					InitialData: '';
				}
				Set s_def_idsPerPage {
					SubsetOf: s_ids;
					Index: i_pg_id;
					Definition: {
						{i_id | p_calc_idPerPage(i_id, ep_currentPage)}
					}
				}
				Parameter p_def_numberOfPages {
					Property: NoSave;
					Definition: ceil(p_def_cardID /$ p_quantityElementsPerPage);
				}
				Parameter p_def_cardID {
					Definition: card(s_ids);
				}
				StringParameter sp_def_currentPage {
					Definition: "Page " + ep_currentPage + " of " + card(s_def_pages);
				}
				Parameter p_quantityElementsPerPage {
					Range: [0, 50000];
					InitialData: 25;
					webui::UponChangeProcedure: pr_changeQuantityElementsPerPage;
				}
				Parameter p_calc_idPerPage {
					IndexDomain: (i_id,i_page);
					Range: binary;
					InitialData: data {};
				}
			}
		}
	}
	Section Application_initialization_and_termination {
		Procedure MainInitialization {
			Body: {
				ProfilerStart();
			}
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
		}
		Procedure PostMainInitialization {
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure PreMainTermination {
			Body: {
				return 1 ; ! We don't work with cases.
				!return DataManagementExit();
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
	Section Application_testing_tracing_and_debugging {
		Procedure MainExecution;
	}
}
